// Code generated by protoc-gen-go. DO NOT EDIT.
// source: temperature.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TemperatureResponse struct {
	Temperature          float64  `protobuf:"fixed64,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TemperatureResponse) Reset()         { *m = TemperatureResponse{} }
func (m *TemperatureResponse) String() string { return proto.CompactTextString(m) }
func (*TemperatureResponse) ProtoMessage()    {}
func (*TemperatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b42fa9d0f0973a72, []int{0}
}

func (m *TemperatureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemperatureResponse.Unmarshal(m, b)
}
func (m *TemperatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemperatureResponse.Marshal(b, m, deterministic)
}
func (m *TemperatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemperatureResponse.Merge(m, src)
}
func (m *TemperatureResponse) XXX_Size() int {
	return xxx_messageInfo_TemperatureResponse.Size(m)
}
func (m *TemperatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TemperatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TemperatureResponse proto.InternalMessageInfo

func (m *TemperatureResponse) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func init() {
	proto.RegisterType((*TemperatureResponse)(nil), "api.TemperatureResponse")
}

func init() { proto.RegisterFile("temperature.proto", fileDescriptor_b42fa9d0f0973a72) }

var fileDescriptor_b42fa9d0f0973a72 = []byte{
	// 153 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x49, 0xcd, 0x2d,
	0x48, 0x2d, 0x4a, 0x2c, 0x29, 0x2d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e,
	0x2c, 0xc8, 0x94, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x0b, 0x25, 0x95, 0xa6,
	0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x54, 0x28, 0x99, 0x73, 0x09, 0x87, 0x20, 0xb4, 0x05,
	0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x29, 0x70, 0x71, 0x23, 0x99, 0x26, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x18, 0x84, 0x2c, 0x64, 0x14, 0xc3, 0x25, 0x84, 0xa4, 0x31, 0x38, 0xb5, 0xa8,
	0x2c, 0x33, 0x39, 0x55, 0xc8, 0x8d, 0x8b, 0xcf, 0x3d, 0xb5, 0x04, 0x49, 0x42, 0x48, 0x4c, 0x0f,
	0x62, 0xbd, 0x1e, 0xcc, 0x7a, 0x3d, 0x57, 0x90, 0xf5, 0x52, 0x12, 0x7a, 0x89, 0x05, 0x99, 0x7a,
	0x58, 0xec, 0x56, 0x62, 0x30, 0x60, 0x4c, 0x62, 0x03, 0xab, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xfb, 0x4c, 0x60, 0xd8, 0xd4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TemperatureServiceClient is the client API for TemperatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemperatureServiceClient interface {
	GetTemperature(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TemperatureService_GetTemperatureClient, error)
}

type temperatureServiceClient struct {
	cc *grpc.ClientConn
}

func NewTemperatureServiceClient(cc *grpc.ClientConn) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) GetTemperature(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TemperatureService_GetTemperatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TemperatureService_serviceDesc.Streams[0], "/api.TemperatureService/GetTemperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &temperatureServiceGetTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TemperatureService_GetTemperatureClient interface {
	Recv() (*TemperatureResponse, error)
	grpc.ClientStream
}

type temperatureServiceGetTemperatureClient struct {
	grpc.ClientStream
}

func (x *temperatureServiceGetTemperatureClient) Recv() (*TemperatureResponse, error) {
	m := new(TemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TemperatureServiceServer is the server API for TemperatureService service.
type TemperatureServiceServer interface {
	GetTemperature(*empty.Empty, TemperatureService_GetTemperatureServer) error
}

// UnimplementedTemperatureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTemperatureServiceServer struct {
}

func (*UnimplementedTemperatureServiceServer) GetTemperature(req *empty.Empty, srv TemperatureService_GetTemperatureServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}

func RegisterTemperatureServiceServer(s *grpc.Server, srv TemperatureServiceServer) {
	s.RegisterService(&_TemperatureService_serviceDesc, srv)
}

func _TemperatureService_GetTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemperatureServiceServer).GetTemperature(m, &temperatureServiceGetTemperatureServer{stream})
}

type TemperatureService_GetTemperatureServer interface {
	Send(*TemperatureResponse) error
	grpc.ServerStream
}

type temperatureServiceGetTemperatureServer struct {
	grpc.ServerStream
}

func (x *temperatureServiceGetTemperatureServer) Send(m *TemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TemperatureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTemperature",
			Handler:       _TemperatureService_GetTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "temperature.proto",
}
